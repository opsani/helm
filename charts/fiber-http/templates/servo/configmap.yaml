apiVersion: v1
kind: ConfigMap
metadata:
  name: servo-config
  labels:
      app.kubernetes.io/name: servo
      app.kubernetes.io/component: core
data:
  optimizer: {{ .Values.opsani.account }}/{{ .Values.opsani.application }}
  log_level: DEBUG
  servo.yaml: |
    kubernetes:
      namespace: {{ .Values.opsani.namespace }}
      settlement: 1m30s
      deployments:
        - name: {{ include "fiber-http.fullname" . }}
          strategy:
            type: canary
            alias: tuning
          replicas:
            min: 1
            max: 4
            step: 1
          containers:
          - name: {{ .Chart.Name }}
            alias: main
            cpu:
              min: 500m
              max: 2.0
              step: 0.125
            memory:
              min: 128 MiB
              max: 3 GiB
              step: 0.125

    prometheus:
      # NOTE: In a sidecar configuration, Prometheus is colocated with the servo in the Pod
      base_url: http://localhost:9090
      metrics:
        - name: main_instance_count
          query: sum(envoy_cluster_membership_healthy{opsani_role!="tuning"}) OR ON() vector(0)
          unit: count
        - name: tuning_instance_count
          query: envoy_cluster_membership_healthy{opsani_role="tuning"} OR ON() vector(0)
          unit: count

        - name: main_pod_avg_request_rate
          query: avg(rate(envoy_cluster_upstream_rq_total{opsani_role!="tuning"}[3m])) OR ON() vector(0)
          unit: rps
        - name: total_request_rate
          query: sum(rate(envoy_cluster_upstream_rq_total[3m])) OR ON() vector(0)
          unit: rps
        - name: main_request_rate
          query: sum(rate(envoy_cluster_upstream_rq_total{opsani_role!="tuning"}[3m])) OR ON() vector(0)
          unit: rps
        - name: tuning_request_rate
          query: rate(envoy_cluster_upstream_rq_total{opsani_role="tuning"}[3m]) OR ON() vector(0)
          unit: rps

        - name: main_success_rate
          query: sum(rate(envoy_cluster_upstream_rq_xx{opsani_role!="tuning", envoy_response_code_class="2"}[3m])) OR ON() vector(0)
          unit: rps
        - name: tuning_success_rate
          query: rate(envoy_cluster_upstream_rq_xx{opsani_role="tuning", envoy_response_code_class="2"}[3m]) OR ON() vector(0)
          unit: rps

        - name: main_error_rate
          query: sum(rate(envoy_cluster_upstream_rq_xx{opsani_role!="tuning", envoy_response_code_class=~"4|5"}[3m])) OR ON() vector(0)
          unit: rps
        - name: tuning_error_rate
          query: rate(envoy_cluster_upstream_rq_xx{opsani_role="tuning", envoy_response_code_class=~"4|5"}[3m]) OR ON() vector(0)
          unit: rps

        - name: main_p99_latency
          query: avg(histogram_quantile(0.99,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role!="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
        - name: tuning_p99_latency
          query: avg(histogram_quantile(0.99,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
        - name: main_p90_latency
          query: avg(histogram_quantile(0.9,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role!="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
        - name: tuning_p90_latency
          query: avg(histogram_quantile(0.9,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
        - name: main_p50_latency
          query: avg(histogram_quantile(0.5,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role!="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
        - name: tuning_p50_latency
          query: avg(histogram_quantile(0.5,rate(envoy_cluster_upstream_rq_time_bucket{opsani_role="tuning"}[3m]))) OR ON() vector(0)
          unit: ms
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: servo
data:
  prometheus.yaml: |
    # Opsani Servo Prometheus Sidecar v0.8.0
    # This configuration allows the Opsani Servo to discover and scrape Pods that
    # have been injected with an Envoy proxy sidecar container that emits the metrics
    # necessary for optimization. Scraping by the Prometheus sidecar is enabled by
    # adding the following annotations to the Pod spec of the Deployment under
    # optimization:
    #
    # annotations:
    #   prometheus.opsani.com/scrape: "true" # Opt-in for scraping by the servo
    #   prometheus.opsani.com/scheme: http # Scrape via HTTP by default
    #   prometheus.opsani.com/path: /stats/prometheus # Default Envoy metrics path
    #   prometheus.opsani.com/port: "9901" # Default Envoy metrics port
    #
    # Path and port collisions with the optimization target can be resolved be changing
    # the relevant annotation.

    # Scrape the targets every 5 seconds.
    # Since we are only looking at specifically annotated Envoy sidecar containers
    # with a known metrics surface area and retain the values for <= 24 hours, we
    # can scrape aggressively. The higher scrape resolution is helpful for testing
    # and running checks that verify configuration health.
    global:
      scrape_interval: 5s
      scrape_timeout: 5s
      evaluation_interval: 5s

    # Scrape the Envoy sidecar metrics based on matching annotations (see above)
    scrape_configs:
    - job_name: 'opsani-envoy-sidecars'


      # Configure access to Kubernetes API server
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
        - role: pod
          namespaces:
            names: [{{ .Values.opsani.namespace }}]

      relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

        # Do not attempt to scrape init containers
        - source_labels: [__meta_kubernetes_pod_container_init]
          action: keep
          regex: false

        # Relabel to scrape only pods that have
        # "prometheus.opsani.com/scrape = true" annotation.
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_opsani_com_scrape]
          action: keep
          regex: true

        # Relabel to configure scrape scheme for pod scrape targets
        # based on pod "prometheus.opsani.com/scheme = <scheme>" annotation.
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_opsani_com_scrape_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)

        # Relabel to customize metric path based on pod
        # "prometheus.opsani.com/path = <metric path>" annotation.
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_opsani_com_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)

        # Relabel to scrape only single, desired port for the pod
        # based on pod "prometheus.opsani.com/port = <port>" annotation.
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_opsani_com_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
