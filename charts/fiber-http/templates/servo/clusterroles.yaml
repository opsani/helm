# Cluster Role for the servo itself
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servo
  labels:
    app.kubernetes.io/name: servo
    app.kubernetes.io/component: core
rules:
- apiGroups: ["apps", "extensions"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["pods", "pods/logs", "pods/status"]
  verbs: ["create", "delete", "get", "list", "watch" ]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]

---
# Cluster Role for the Prometheus sidecar
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: servo
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Bind the Servo Cluster Role to the servo Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servo
  labels:
    app.kubernetes.io/name: servo
    app.kubernetes.io/component: core
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: servo
subjects:
- kind: ServiceAccount
  name: servo
  namespace: {{ .Values.opsani.namespace }}

---
# Bind the Prometheus Cluster Role to the servo Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: servo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: servo
  namespace: {{ .Values.opsani.namespace }}
